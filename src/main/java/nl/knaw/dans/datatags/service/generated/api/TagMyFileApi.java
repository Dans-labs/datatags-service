/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package nl.knaw.dans.datatags.service.generated.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import nl.knaw.dans.datatags.service.generated.model.DataTagSchemaNode;
import nl.knaw.dans.datatags.service.generated.model.UserData;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-02-20T09:42:15.612+01:00[Europe/Amsterdam]")
@Api(value = "tag-my-file", description = "the tag-my-file API")
public interface TagMyFileApi {

    Logger log = LoggerFactory.getLogger(TagMyFileApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add a new tag to the file", nickname = "addTag", notes = "", response = DataTagSchemaNode.class, tags={ "DataTags", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DataTags Question response.", response = DataTagSchemaNode.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/tag-my-file/{schema-name}/{version}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DataTagSchemaNode> addTag(@ApiParam(value = "todo",required=true) @PathVariable("schema-name") String schemaName
,@ApiParam(value = "todo",required=true) @PathVariable("version") String version
,@ApiParam(value = "The url of Dataverse/B2Share" ,required=true) @RequestHeader(value="sourceUrl", required=true) String sourceUrl
,@NotNull @ApiParam(value = "The source pid of object", required = true) @Valid @RequestParam(value = "sourcePid", required = true) String sourcePid
,@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "nodeName", required = true) String nodeName
,@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "answer", required = true) String answer
,@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "fileId", required = true) List<Long> fileId
,@ApiParam(value = "The key to post end result from DataTags service" ) @RequestHeader(value="sourceKey", required=false) String sourceKey
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"nodeName\" : \"nodeName\",\n  \"qaList\" : [ {\n    \"question\" : \"question\",\n    \"answer\" : \"answer\"\n  }, {\n    \"question\" : \"question\",\n    \"answer\" : \"answer\"\n  } ],\n  \"subTitle\" : \"subTitle\",\n  \"question\" : \"question\",\n  \"contentText\" : \"contentText\",\n  \"answers\" : [ {\n    \"name\" : \"name\",\n    \"label\" : \"label\",\n    \"target\" : \"target\"\n  }, {\n    \"name\" : \"name\",\n    \"label\" : \"label\",\n    \"target\" : \"target\"\n  } ],\n  \"title\" : \"title\"\n}", DataTagSchemaNode.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TagMyFileApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "add tempory api key token", nickname = "saveTemporaryApiToken", notes = "", tags={ "DataTags", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok"),
        @ApiResponse(code = 400, message = "invalid input") })
    @RequestMapping(value = "/tag-my-file/{schema-name}/{version}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> saveTemporaryApiToken(@ApiParam(value = "Security object that needs to be added to the" ,required=true )  @Valid @RequestBody UserData body
,@ApiParam(value = "todo",required=true) @PathVariable("schema-name") String schemaName
,@ApiParam(value = "todo",required=true) @PathVariable("version") String version
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TagMyFileApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
